Git Lesson 2 Reflections

What happens when you initialize a repository? Why do you need to do it?

An initial hidden metadata directory (.git) is created to track information
about the current directory. This allows changes to be tracked.

git init
 -  Creates a new git repository in the current directory

git status
 -  Shows current branch, commit, untracked and changed files in the current
    repo

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area allows for changes in the working directory to be selectively
prepared for a commit. It allows a potential commit to be updated and defined
before any changes are made to the repository


git add
 -  Adds files from the working directory to the staging area

git commit
 -  Commits changes from the staging area to the (local) repository
 -  Commit message required. Add on command line with -m or use local editor.
    May want to change this to gvim.

?? Can you set a commit message before you commit (ie to staging) ??

Udacity Git Commit Message Style Guide
http://udacity.github.io/git-styleguide/

Differencing changes in working directory and staging.

git diff
 -  No arguments will diff between the working directory (WD) and Staging

git diff --staged
 -  Diff between staging area and repository (currently checked out commit -
    ?)

git reset --hard
 -  Forcably discard any changes in Staging and WD

How can you use the staging area to make sure you have one commit per logical change?

The staging area alows you to select specific files that should be part of the
commit and leave other changes behind.

Branches

Branches are a label that you can assign to a commit.

git branch <branch-name>
 -  create a branch

git checkout <branch-name>
 -  Switch onto branch-name
 -  Subsequent commits will happen on branch-name and will move the label to
    the latest commit in that branch

master is the default branch name created by git when a repo is created

Create a branch whenever you start a new work item

How do the diagrams help you visualize the branch structure?
 -  commits link to a parent commit
 -  commits my be unreachable if a branch name is not on their same line

git checkout -b <new-branch-name>
 => equivalent to:
    git branch <new-branch-name>
    git checkout <new-branch-name>

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result is a single branch (the to branch) with a shared commit history
from both of the branches. Both branches converge into a single logical
branch.

git merge <branch-to> <branch-from>
 -  merges <branch-from> => <branch-to>
 -  also
    git checkout <branch-to>
    git merge <branch-from>

get branch -d <branch-from>
 -  Removes the <branch-from> label
 -  All of <branch-from>'s commits are accessible from <branch-to>

merge conflicts
 -  git merge --abort
     => discard a pending merge that has failed
