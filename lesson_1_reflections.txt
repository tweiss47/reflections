How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It limited the scope of the view to just those lines of the file that had
    changes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It will allow you to view the changes made to the file over time. And to
    rollback to previous versions if necessary.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The disadvantage is that you may lose data if you fail to commit. The main
    advantage is that there aren't intermediate states of the file saved only
    those that matter.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Source code changes are a logical set of changes that may span multiple
    files. The commit history should reflect the logical progression of the
    code.

How can you use the commands git log and git diff to view the history of files?

    git log will show you the commit history for the repo. You can scroll down
    with j and up with k to see the commit ids and descriptions for each
    commit.

    git diff <old-commit> <new-commit> will show you a diff of the changes.

    You can see general churn information (files changed and +- info) using
    git log --stat

How might using version control make you more confident to make changes that
could break something?

    Fill in your answer here

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
